<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tips on なるはやで いい感じの 動作確認</title>
    <link>https://kamichidu.github.com/categories/tips/</link>
    <description>Recent content in Tips on なるはやで いい感じの 動作確認</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Wed, 17 Jun 2015 00:00:00 +0900</lastBuildDate>
    <atom:link href="https://kamichidu.github.com/categories/tips/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>PHPでの開発環境構築メモ</title>
      <link>https://kamichidu.github.com/post/2015/06/17-075721/</link>
      <pubDate>Wed, 17 Jun 2015 00:00:00 +0900</pubDate>
      
      <guid>https://kamichidu.github.com/post/2015/06/17-075721/</guid>
      <description>

&lt;p&gt;つい昨日のことですが、PHPでの開発環境を行ったので、メモがてら。&lt;/p&gt;

&lt;p&gt;手順だけはQiitaを参照。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/kamichidu/items/384eecdf4df73b99fa84&#34;&gt;http://qiita.com/kamichidu/items/384eecdf4df73b99fa84&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;phpのバージョン&#34;&gt;PHPのバージョン&lt;/h2&gt;

&lt;p&gt;特に理由がないなら、現状の最新版を使うといいと思います。
&lt;a href=&#34;https://registry.hub.docker.com/&#34;&gt;Docker Hub&lt;/a&gt;には、&lt;a href=&#34;https://registry.hub.docker.com/_/php/&#34;&gt;PHP公式イメージ&lt;/a&gt;が提供されているのでとても助かりました。&lt;/p&gt;

&lt;p&gt;公式イメージには、以下のバージョンがあるみたい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;5.4.42-cli, 5.4-cli, 5.4.42, 5.4 (5.4/Dockerfile)&lt;/li&gt;
&lt;li&gt;5.4.42-apache, 5.4-apache (5.4/apache/Dockerfile)&lt;/li&gt;
&lt;li&gt;5.4.42-fpm, 5.4-fpm (5.4/fpm/Dockerfile)&lt;/li&gt;
&lt;li&gt;5.5.26-cli, 5.5-cli, 5.5.26, 5.5 (5.5/Dockerfile)&lt;/li&gt;
&lt;li&gt;5.5.26-apache, 5.5-apache (5.5/apache/Dockerfile)&lt;/li&gt;
&lt;li&gt;5.5.26-fpm, 5.5-fpm (5.5/fpm/Dockerfile)&lt;/li&gt;
&lt;li&gt;5.6.10-cli, 5.6-cli, 5-cli, cli, 5.6.10, 5.6, 5, latest (5.6/Dockerfile)&lt;/li&gt;
&lt;li&gt;5.6.10-apache, 5.6-apache, 5-apache, apache (5.6/apache/Dockerfile)&lt;/li&gt;
&lt;li&gt;5.6.10-fpm, 5.6-fpm, 5-fpm, fpm (5.6/fpm/Dockerfile)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;5.4、5.5、5.6系をそれぞれ選べて、しかも最初からApacheまでついてくるのは楽で良いですね。
今回は、5.6-apacheを使いました。
docker pull php:5.6-apacheでDocker HubからイメージをPullしてくる。&lt;/p&gt;

&lt;h2 id=&#34;依存ライブラリの管理&#34;&gt;依存ライブラリの管理&lt;/h2&gt;

&lt;p&gt;今までPHPは、メンテとか開発途中での引き継ぎとかで、自分で構築はやったことなかった。
今回はSmartyとAWS SDKを使いたかったので、依存管理についてちょっと調べた。
&lt;a href=&#34;https://getcomposer.org/&#34;&gt;Composer&lt;/a&gt;が便利っぽい。
どうでもいいけど、PHPって音楽っぽい名前が多いよね。&lt;/p&gt;

&lt;p&gt;composerはデフォルトでプロジェクトローカルへのインストールになります。
インストールすると、composer.pharという実行可能ファイルがカレントディレクトリに作成されますので、これを使う。
composer.jsonに、依存ライブラリを書いていき、./composer.phar installでプロジェクトローカルにインストールができる。
依存関係インストールすると、composer.lockというありがちなファイルができる。&lt;/p&gt;

&lt;p&gt;諸説あるみたいだけど、Composerを使う上では、&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;composer.phar&lt;/li&gt;
&lt;li&gt;composer.json&lt;/li&gt;
&lt;li&gt;composer.lock&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;をバージョン管理しておいたほうが良さそう。
理由は気が向いたら書く。&lt;/p&gt;

&lt;p&gt;一旦以上。
多分あとで記載内容に修正入れると思う。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>goの開発環境を整える</title>
      <link>https://kamichidu.github.com/post/2015/04/24-gogogo/</link>
      <pubDate>Fri, 24 Apr 2015 00:00:00 +0900</pubDate>
      
      <guid>https://kamichidu.github.com/post/2015/04/24-gogogo/</guid>
      <description>

&lt;p&gt;最近ちょいちょいGoで遊んでいます。
その際に、環境構築周りでなんとなく作ったルールがあるので紹介します。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;処理系は~/local/にインストールする&lt;/p&gt;

&lt;p&gt;インストール用のスクリプト&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;でビルドしてインストールを行います。
実行すると自動的にGo-1.4.2をユーザランドにインストールします。
なお、GOROOTは基本的にGoのバイナリに組み込まれていますが、常に指定するようにしています。&lt;/p&gt;

&lt;p&gt;yaourt -Sy go とかで入れるのは楽なんですが、ここは好みですね。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;依存関係のライブラリは、各プロジェクトディレクトリ以下にインストールする&lt;/p&gt;

&lt;p&gt;個人的にはこれすごい大事で、各プロジェクトごとの依存関係を管理するのに役立ちます。
~/.go/等に複数のプロジェクトの依存関係を入れてしまうと、他のプロジェクトのために入れたpackageの影響でビルドがコケたりコケなかったりします。
各プロジェクトごとにGOPATHを切っておくと、そのへんの確認であったり管理が楽になります&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;export GOPATH=$(pwd)/.go/ してから go get github.com/some/thing とかすると、.go/以下にインストールされます。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Goはとてもクロスコンパイルが簡単なので、可能な限りCIサービスと連携して複数プラットフォーム用のバイナリを吐いておく&lt;/p&gt;

&lt;p&gt;開発というより、使ってもらう際の利点となります。
よくある「linuxはビルド簡単にできるからいいんだけど、windowsでビルドするのたるい&amp;hellip;」という状況を軽減できます。
Goはクロスコンパイルが死ぬほど楽なので、 .travis.yml 等からクロスコンパイルする設定を入れておくと、簡単に他の人に試してもらうことができるので楽です。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;以上のルールにより、以下のご利益があります。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;複数のプロジェクト間で依存関係が切り分けることができる&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Goの複数バージョンを簡単に変更できる&lt;/p&gt;

&lt;p&gt;要するに*env系が中でやってることをそのままやる感じですけど、現状Goに決定版のようなツールはないため、当面このやり方でいくか、または何か作ろうかと思ってます。
ただし、GOROOTはバイナリに埋め込まれるため、単にPATHの切り替えだけでいいのですが、まぁ面倒なので。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;便利&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;みんなGoやればいいと思うよ。
私はGoやって楽しいです。(構文はちょっと好みではないけど。)&lt;/p&gt;

&lt;h2 id=&#34;付録&#34;&gt;付録&lt;/h2&gt;

&lt;h3 id=&#34;goの環境変数&#34;&gt;Goの環境変数&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;GOROOT&lt;/p&gt;

&lt;p&gt;Goの処理系をインストールしたディレクトリを指定する。
Goのバイナリ中に埋め込まれるため、bashから echo $GOROOT して何も表示されなくても、 echo $(go env GOROOT) すると表示されるかと思います。
Goの標準packageは $GOROOT 以下に入っています。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;GOPATH&lt;/p&gt;

&lt;p&gt;標準packageでないpackageがインストールされるディレクトリを指定します。
go get hoge/fuga とすると、 $GOPATH/src/ 以下にpackageがインストールされます。
また、 $GOPATH/bin/ 以下には、 go get で入れたpackageのバイナリが格納されます。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;goのインストールスクリプト&#34;&gt;Goのインストールスクリプト&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pushd $TEMP
# github releasesはリダイレクションされるため、-Lをつける必要がある
curl -o go1.4.2.tar.gz -L https://github.com/golang/go/archive/go1.4.2.tar.gz
tar -xzvf go1.4.2.tar.gz
if [ ! -d ~/local/go/ ]; then
    mkdir -p ~/local/go/
fi
mv go-go1.4.2/ ~/local/go/1.4.2/
popd

if [ ! -f ~/local/go/default/ ]; then
    ln -s ~/local/go/1.4.2/ ~/local/go/default/
fi

export GOROOT=~/local/go/default/
export PATH=$GOROOT/bin/:$PATH

pushd ~/local/go/1.4.2/src/
./make.bash
popd
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;Goならそういう管理いらないよ！という意見は欲しい。そこまで把握できている訳ではないので。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:1&#34;&gt;Goならそういう管理いらないよ！という意見は欲しい。そこまで把握できている訳ではないので。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Vimの正規表現を切り刻む</title>
      <link>https://kamichidu.github.com/post/2014/12/20-parse-vim-regex/</link>
      <pubDate>Sat, 20 Dec 2014 00:00:00 +0900</pubDate>
      
      <guid>https://kamichidu.github.com/post/2014/12/20-parse-vim-regex/</guid>
      <description>

&lt;p&gt;この記事はVim Advent Calendar 2014の20日目の記事です。&lt;/p&gt;

&lt;p&gt;19日目はthleapさんによる&lt;a href=&#34;http://chroma.hatenablog.com/entry/2014/12/19/224359&#34;&gt;マークアップや文章の編集をちょっと楽にする&lt;/a&gt;でした。&lt;/p&gt;

&lt;h2 id=&#34;導入&#34;&gt;導入&lt;/h2&gt;

&lt;p&gt;みなさん、正規表現、使ってますか？
私は毎日使っています。
特にVimの正規表現、かなり変態で良さがありますよね。&lt;/p&gt;

&lt;p&gt;ところでPerlには、&lt;a href=&#34;https://metacpan.org/pod/Regexp::Assemble&#34;&gt;Regexp::Assemble&lt;/a&gt;という非常に便利なモジュールがあります。
この子は何をする子かというと、自動で最適化された正規表現を生成してくれます。
正規表現のマッチングでは、うまくトライ木を作ることができれば、かなりマッチング速度が向上しますので、自動でそれをやってくれるモジュールと言えばわかりやすいでしょうか。
(いわゆるtrie optimization)&lt;/p&gt;

&lt;p&gt;例えば、&amp;rdquo;public&amp;rdquo;、&amp;rdquo;protected&amp;rdquo;、&amp;rdquo;private&amp;rdquo;という3つの単語についてマッチする正規表現は、
純粋に&lt;code&gt;public|protected|private&lt;/code&gt;と書けば良いのですが、これだと遅いので&lt;code&gt;(?:p(?:ublic|r(?:otected|ivate)))&lt;/code&gt;と書いたほうが速いので、こう書きましょうよってことです。&lt;/p&gt;

&lt;p&gt;ここから本題。
Regexp::Assembleのように、自動で正規表現を最適化するためには、まず正規表現を切り刻まなければなりません。
この記事では、正規表現を切り刻んで遊んでみることにします。&lt;/p&gt;

&lt;h2 id=&#34;下準備&#34;&gt;下準備&lt;/h2&gt;

&lt;p&gt;正規表現を切り刻む、Vim scriptコードを用意します。
以下を手元で実行し、&lt;code&gt;RegexpTokenize&lt;/code&gt;コマンドを使えるようにしてください。&lt;/p&gt;

&lt;p&gt;(簡単のため、一部の正規表現にしか対応させてません。)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;function! s:tokenize(expr)
    let [chars, i]= [split(a:expr, &#39;\zs&#39;), 0]
    let tokens= []
    while i &amp;lt; len(chars)
        let ch= chars[i]

        if ch ==# &#39;\&#39;
            if !(i &amp;lt; len(chars))
                break
            endif

            let i+= 1
            let ch= chars[i]

            if ch ==# &#39;+&#39;
                let tokens+= [&#39;\+&#39;]
            elseif ch ==# &#39;=&#39; || ch ==# &#39;?&#39;
                let tokens+= [&#39;\&#39; . ch]
            elseif ch ==# &#39;(&#39;
                let tokens+= [&#39;\(&#39;]
            elseif ch ==# &#39;)&#39;
                let tokens+= [&#39;\)&#39;]
            elseif ch ==? &#39;m&#39; || ch ==? &#39;v&#39;
                let tokens+= [&#39;\&#39; . ch]
            elseif ch ==? &#39;c&#39;
                let tokens+= [&#39;\&#39; . ch]
            elseif ch ==? &#39;i&#39;
                let tokens+= [&#39;\&#39; . ch]
            elseif ch ==? &#39;k&#39;
                let tokens+= [&#39;\&#39; . ch]
            elseif ch ==? &#39;f&#39;
                let tokens+= [&#39;\&#39; . ch]
            elseif ch ==? &#39;p&#39;
                let tokens+= [&#39;\&#39; . ch]
            elseif ch ==? &#39;s&#39;
                let tokens+= [&#39;\&#39; . ch]
            elseif ch ==? &#39;d&#39;
                let tokens+= [&#39;\&#39; . ch]
            elseif ch ==? &#39;x&#39;
                let tokens+= [&#39;\&#39; . ch]
            elseif ch ==? &#39;o&#39;
                let tokens+= [&#39;\&#39; . ch]
            elseif ch ==? &#39;w&#39;
                let tokens+= [&#39;\&#39; . ch]
            elseif ch ==? &#39;h&#39;
                let tokens+= [&#39;\&#39; . ch]
            elseif ch ==? &#39;a&#39;
                let tokens+= [&#39;\&#39; . ch]
            elseif ch ==? &#39;l&#39;
                let tokens+= [&#39;\&#39; . ch]
            elseif ch ==? &#39;u&#39;
                let tokens+= [&#39;\&#39; . ch]
            else
                throw printf(&amp;quot;Unsupported regex: `%s&#39;&amp;quot;, a:expr)
            endif
        else
            let tokens+= [ch]
        endif

        let i+= 1
    endwhile
    return tokens
endfunction

command!
\   -nargs=1
\   RegexpTokenize
\   echo s:tokenize(&amp;lt;q-args&amp;gt;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;切り刻め&#34;&gt;切り刻め！&lt;/h2&gt;

&lt;p&gt;以下のコマンドを実行してみましょう。
切り刻まれ、正規表現単位に分割された文字列が表示されます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;&amp;quot; =&amp;gt; [&#39;h&#39;, &#39;o&#39;, &#39;g&#39;, &#39;e&#39;, &#39;\(&#39;, &#39;\w&#39;, &#39;\+&#39;, &#39;\)&#39;, &#39;\?&#39;]
RegexpTokenize hoge\(\w\+\)\?
&amp;quot; =&amp;gt; [&#39;p&#39;, &#39;u&#39;, &#39;b&#39;, &#39;l&#39;, &#39;i&#39;, &#39;c&#39;]
RegexpTokenize public
&amp;quot; =&amp;gt; [&#39;\d&#39;, &#39;\+&#39;]
RegexpTokenize \d\+
&amp;quot; =&amp;gt; [&#39;\d&#39;, &#39;\+&#39;, &#39;\(&#39;, &#39;,&#39;, &#39;\d&#39;, &#39;\+&#39;, &#39;\)&#39;, &#39;\=&#39;]
RegexpTokenize \d\+\(,\d\+\)\=
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;最後に&#34;&gt;最後に&lt;/h2&gt;

&lt;p&gt;この記事で書いたようなことをするライブラリとして、&lt;a href=&#34;https://github.com/kamichidu/vim-regexp-assemble&#34;&gt;vim-regexp-assemble&lt;/a&gt;というものを作成しております。
切り刻みたいだけなら、Vital.Regexp.Lexerを使えばそれで終わってしまいますし、この記事に記載した一部の正規表現だけでなく、Vimの正規表現すべてに対して対応しています。&lt;/p&gt;

&lt;p&gt;(help整備したら&lt;a href=&#34;https://github.com/vim-jp/vital.vim&#34;&gt;vital本家&lt;/a&gt;に入れてもらうかもしれませんが、ちょっと先の話になりそう。)&lt;/p&gt;

&lt;p&gt;みなさんもっと正規表現で遊びましょう。
ということで、20日目の記事を終わりたいと思います。
明日はmitsuseさんです。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>watchdogsを使ってjavaのシンタックスチェックを非同期に行う</title>
      <link>https://kamichidu.github.com/post/2014/10/25-configure-watchdogs-for-javac/</link>
      <pubDate>Sat, 25 Oct 2014 00:00:00 +0900</pubDate>
      
      <guid>https://kamichidu.github.com/post/2014/10/25-configure-watchdogs-for-javac/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/osyo-manga/vim-watchdogs&#34;&gt;vim-watchdogs&lt;/a&gt;とは、&lt;a href=&#34;https://github.com/thinca/vim-quickrun&#34;&gt;vim-quickrun&lt;/a&gt;を使って非同期にシンタックスチェックを行う便利pluginです。
詳しくはhelpか、&lt;a href=&#34;http://d.hatena.ne.jp/osyo-manga/20120924/1348473304&#34;&gt;おしょーさんの記事&lt;/a&gt;を参照してください。&lt;/p&gt;

&lt;p&gt;javaのコンパイルを行うためにはclasspathの設定やら何やら、色々と煩雑な手順を踏む必要があります。
mavenなんかを使えばこの辺楽になりますが、いちいちmaven compileなんてやってたら日が暮れてしまいます。
そこでwatchdogsですよ。&lt;/p&gt;

&lt;p&gt;以下の設定を$MYVIMRCに記述して、javaの編集中に:WatchdogsRunすれば、いい感じにqfixwindowが開くと思います。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;let g:quickrun_config[&#39;java/watchdogs_checker&#39;]= {&#39;type&#39;: &#39;watchdogs_checker/javac&#39;}
let g:quickrun_config[&#39;watchdogs_checker/javac&#39;]= {
\   &#39;command&#39;: &#39;$JAVA_HOME/bin/javac&#39;,
\   &#39;cmdopt&#39;: join([
\       &#39;-Xlint:all&#39;,
\       &#39;-d $TEMP&#39;,
\       &#39;-sourcepath &amp;quot;%{javaclasspath#source_path()}&amp;quot;&#39;,
\       &#39;-classpath &amp;quot;%{javaclasspath#classpath()}&amp;quot;&#39;,
\       &#39;-deprecation&#39;,
\   ]),
\   &#39;exec&#39;: &#39;%c %o %S&#39;,
\   &#39;errorformat&#39;: &#39;%A%f:%l: %m,%-Z%p^,%+C%.%#,%-G%.%#&#39;,
\}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;errorformatについては、:help errorformat-javacから引っぱってきました。
ちょっと不満点あるんで、そのうちどうにかするかも。&lt;/p&gt;

&lt;p&gt;ミソは&lt;a href=&#34;https://github.com/kamichidu/vim-javaclasspath&#34;&gt;vim-javaclasspath&lt;/a&gt;を使ってclasspathの設定やsourcepathの設定を簡略化してるところ。
vim-javaclasspathが対応している限り、特に自分で何かしなくてもwatchdogsで非同期チェックが可能になります。&lt;/p&gt;

&lt;p&gt;参考までに、私のqfixwindow関係の設定は、&lt;a href=&#34;http://d.hatena.ne.jp/thinca/20130708/1373210009&#34;&gt;thincaさんの記事&lt;/a&gt;を参考に入れています。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>