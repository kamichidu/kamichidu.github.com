<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>なるはやで いい感じの 動作確認</title>
    <link>https://kamichidu.github.io/categories/article/index.xml</link>
    <description>Recent content on なるはやで いい感じの 動作確認</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <atom:link href="https://kamichidu.github.io/categories/article/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>JSON Web Token（JWT）のClaimについて</title>
      <link>https://kamichidu.github.io/post/2017/01/24-about-json-web-token/</link>
      <pubDate>Tue, 24 Jan 2017 19:19:50 +0900</pubDate>
      
      <guid>https://kamichidu.github.io/post/2017/01/24-about-json-web-token/</guid>
      <description>

&lt;p&gt;REST APIなどを開発すると、避けては通れないものに認証があります。
最近はOAuth2 Providerを実装することが多いのですが、発行するアクセストークンにJSON Web Token（JWT）を利用しています。
JWTは名前の通り、&lt;a href=&#34;https://tools.ietf.org/html/rfc7519&#34;&gt;RFC7519&lt;/a&gt;によって定義されたスキーマを持つJSONです。
JSONの各キーとして、RFCで定義されている標準的なキーと値のペア（Claim）を取ることにより、標準的な取り扱いが可能になります。&lt;/p&gt;

&lt;p&gt;本記事では、JWTのClaimについて、OAuth2 Providerでのアクセストークンを発行する立場から、備忘録的にまとめたいと思います。&lt;/p&gt;

&lt;p&gt;なお、JWTには&lt;a href=&#34;https://tools.ietf.org/html/rfc7519#section-5&#34;&gt;JOSE Header&lt;/a&gt;のような、Claimとは別の仕様も含まれていますが、本記事ではClaimのみを対象とします。&lt;/p&gt;

&lt;h2 id=&#34;アクセストークンとしてjwtを利用することの利点&#34;&gt;アクセストークンとしてJWTを利用することの利点&lt;/h2&gt;

&lt;p&gt;JWTは単なるJSONのため、アクセストークンとして用いることにより様々な情報を含めることができます。
それにより、認証サーバとアプリケーションサーバを分割しているようなアーキテクチャであれば、認証サーバの負荷を軽減することに寄与します。
&lt;a href=&#34;http://d.hatena.ne.jp/ritou/20140927/1411811648&#34;&gt;こちらの記事がよくまとまっており、わかりやすいです。&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;また、本記事の範囲からは離れますが、JWTと関連する&lt;a href=&#34;https://tools.ietf.org/html/rfc7516&#34;&gt;JSON Web Encryption（JWE）&lt;/a&gt;や
&lt;a href=&#34;https://tools.ietf.org/html/rfc7515&#34;&gt;JSON Web Signature（JWS）&lt;/a&gt;などと併用することにより、
規格化された方法のみで一般的なREST APIの認証で必要となる要件を満たすことができます。
規格化されているため、技術者間の共通言語としても利用できますし、サービスごとに独自仕様を策定するという無駄な手間を省くことができます。&lt;/p&gt;

&lt;h2 id=&#34;claimの種類&#34;&gt;Claimの種類&lt;/h2&gt;

&lt;p&gt;JWTには、&lt;a href=&#34;https://tools.ietf.org/html/rfc7519#section-4&#34;&gt;3種類のClaimが定義されています。&lt;/a&gt;
ここでは、それぞれのClaimについて簡単に説明します。&lt;/p&gt;

&lt;h3 id=&#34;registered-claim-names&#34;&gt;Registered Claim Names&lt;/h3&gt;

&lt;p&gt;IANAの&amp;rdquo;JSON Web Token Claims&amp;rdquo;に登録された、一般的な用途で利用されることを想定されたClaimです。
基本的にこれらのClaimの利用は任意ですが、JWTを発行する際には可能な限り含めておいたほうが良いと思います。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&amp;ldquo;iss&amp;rdquo; (Issuer) (Optional)&lt;/p&gt;

&lt;p&gt;JWTの発行者を意味します。
値として文字列かURIを取ることができ、アプリケーション名やドメイン名が入ると思います。
値は大文字/小文字を区別して扱われます。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;ldquo;sub&amp;rdquo; (Subject) (Optional)&lt;/p&gt;

&lt;p&gt;JWTの用途を意味します。
値として文字列かURIを取ることができます。
値は大文字/小文字が区別され、同じIssuer内でユニーク、または全世界でユニークである必要があります。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;ldquo;aud&amp;rdquo; (Audience) (Optional)&lt;/p&gt;

&lt;p&gt;JWTの想定利用者を意味します。
値として文字列かURI、またはそれらの配列を取ることができます。
値は大文字/小文字が区別されます。&lt;/p&gt;

&lt;p&gt;発行する側はJWTの発行要求をしてきた相手を識別する文字列やURIを入れ込み、
発行された側はAudience Claimが存在する場合は自分向けに発行されたJWTなのかどうかを検証することに用います。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;ldquo;exp&amp;rdquo; (Expiration Time) (Optional)&lt;/p&gt;

&lt;p&gt;JWTが失効する日時を意味します。
値としては、数値表現された日付となります。（例: &amp;ldquo;12345&amp;rdquo;）&lt;/p&gt;

&lt;p&gt;失効する日時を表すUNIX時刻などを入れるのが良いと思います。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;ldquo;nbf&amp;rdquo; (Not Before) (Optional)&lt;/p&gt;

&lt;p&gt;JWTが有効になる日時を意味します。
取り得る値は&amp;rdquo;exp&amp;rdquo;と同様です。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;ldquo;iat&amp;rdquo; (Issued At) (Optional)&lt;/p&gt;

&lt;p&gt;JWTが発行された日時を意味します。
取り得る値は&amp;rdquo;exp&amp;rdquo;や&amp;rdquo;nbf&amp;rdquo;と同様です。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&amp;ldquo;jti&amp;rdquo; (JWT ID) (Optional)&lt;/p&gt;

&lt;p&gt;JWTのユニーク性を担保するID値を意味します。
&amp;ldquo;jti&amp;rdquo;が異なるJWTは、全く別のJWTとして扱われます。
値は大文字/小文字が区別されます。&lt;/p&gt;

&lt;p&gt;&amp;ldquo;jti&amp;rdquo;の存在は、同じJWTを使い回すことを抑制することを目的にしています。
JWTの発行ごとに、UUIDでも入れておくのが良いのでしょうか。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;public-claim-names&#34;&gt;Public Claim Names&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://www.iana.org/assignments/jwt/jwt.xhtml&#34;&gt;IANA &amp;ldquo;JSON Web Token Claims&amp;rdquo;&lt;/a&gt;に登録されているClaimを言います。
Registered Claimは基本的にIANAに登録されており、Registered ClaimはPublic Claimのサブセットになっています。
Public ClaimはIANAに登録されたClaimを言い、主に汎用的な用途のClaimを衝突する可能性を（仕様的な意味で）排除する目的で利用されます。&lt;/p&gt;

&lt;p&gt;一般的なサービスを開発するとかいう場合には、恐らくこの種類のClaimを使うことはないでしょう。&lt;/p&gt;

&lt;h3 id=&#34;private-claim-names&#34;&gt;Private Claim Names&lt;/h3&gt;

&lt;p&gt;このClaimは、JWTのIssuerとAudienceの間で取り決めされた仕様に応じて何でも定義することができ、
Private ClaimはRegistered ClaimやPublic Claimで予約された以外の名前を使うことができます。
JWTをアクセストークンとして利用する場合は、大抵Private Claimにガシガシ値を突っ込んでいくことになります。&lt;/p&gt;

&lt;p&gt;基本的にはどのような値も入れることはできますが、Claim名の衝突を避けるため、プレフィクスや企業のドメイン名をつけるなど工夫をしたほうが良いと思います。&lt;/p&gt;

&lt;h2 id=&#34;アクセストークンの構築例&#34;&gt;アクセストークンの構築例&lt;/h2&gt;

&lt;p&gt;ここでは今まで説明した内容を踏まえて、実際のアクセストークンがどのようになるかを説明します。&lt;/p&gt;

&lt;h3 id=&#34;想定ケース&#34;&gt;想定ケース&lt;/h3&gt;

&lt;p&gt;想定するサービスは、ログインユーザの情報として以下を持つとします。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;ユーザID&lt;/li&gt;
&lt;li&gt;ユーザ名&lt;/li&gt;
&lt;li&gt;メールアドレス&lt;/li&gt;
&lt;li&gt;年齢&lt;/li&gt;
&lt;li&gt;性別&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;また、サービスは当然独自のドメイン（example.com）を持っているものとし、
認証系と機能系はそれぞれサブドメイン（idp.example.comとapi.example.com）で構成されているとします。&lt;/p&gt;

&lt;h3 id=&#34;アクセストークン設計&#34;&gt;アクセストークン設計&lt;/h3&gt;

&lt;p&gt;アクセストークンとしてJWTを発行するのは認証系であり、発行されたJWTを利用するのは機能系となります。
場合によっては、認証系にはユーザ情報を検索する等の機能が含まれている場合もありますので、それも加味します。
つまりJWTの発行者はidp.example.comとなり、想定利用者はapi.example.comおよびidp.example.comとなります。&lt;/p&gt;

&lt;p&gt;発行するJWTの用途としては、アクセストークンです。
セキュリティを考えて、発行から1時間で失効するのが良いでしょう。
また、発行したJWTが有効になる時刻は、各サーバで時刻同期が仮にずれていた場合を考えて発行時刻の5秒前としましょう。&lt;/p&gt;

&lt;p&gt;以上をまとめると、Registered ClaimのみでJWTを構成すると以下のようになります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;jti&amp;quot;: &amp;quot;92f46647-90a2-4174-bca9-27d7f69a8fb7&amp;quot;,
  &amp;quot;iss&amp;quot;: &amp;quot;https://idp.example.com/&amp;quot;,
  &amp;quot;sub&amp;quot;: &amp;quot;AccessToken&amp;quot;,
  &amp;quot;aud&amp;quot;: [
    &amp;quot;https://api.example.com/&amp;quot;,
    &amp;quot;https://idp.example.com/&amp;quot;
  ],
  &amp;quot;exp&amp;quot;: 1485320878,
  &amp;quot;nbf&amp;quot;: 1485317273,
  &amp;quot;iat&amp;quot;: 1485317278
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;続いてサービスに固有のClaimを考えます。
Private Claimとして、ログインユーザの情報をすべて含めてしまいましょう。
名前が衝突するのを防止するため、idp.example.comをプレフィクスとして構成することにし、
ユーザ情報の各属性を、そのまま英語に直したものをサフィックスとしてしまいましょう。&lt;/p&gt;

&lt;p&gt;例として以下のようなユーザ情報を考えます。
（golangのstructで示します。）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user := &amp;amp;struct{
	Id    string
	Name  string
	Email string
	Age   int
	Sex   string
}{
	Id:    &amp;quot;72f5fbcc-75bb-4393-b2dd-76e74ad0fd87&amp;quot;,
	Name:  &amp;quot;pico jiro&amp;quot;,
	Email: &amp;quot;picojiro@example.com&amp;quot;,
	Age:   30,
	Sex:   &amp;quot;male&amp;quot;,
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このユーザ情報からPrivate Claimを構成すると以下のようになります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;https://idp.example.com/claim-types/user-id&amp;quot;: &amp;quot;72f5fbcc-75bb-4393-b2dd-76e74ad0fd87&amp;quot;,
  &amp;quot;https://idp.example.com/claim-types/user-name&amp;quot;: &amp;quot;pico jiro&amp;quot;,
  &amp;quot;https://idp.example.com/claim-types/user-email&amp;quot;: &amp;quot;picojiro@example.com&amp;quot;,
  &amp;quot;https://idp.example.com/claim-types/user-age&amp;quot;: 30,
  &amp;quot;https://idp.example.com/claim-types/user-sex&amp;quot;: &amp;quot;male&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Registered ClaimとPrivate Claimを合わせて、最終的に以下のようなJWTが得られました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;jti&amp;quot;: &amp;quot;37852e99-ab54-460c-92b2-18231d3ba823&amp;quot;,
  &amp;quot;iss&amp;quot;: &amp;quot;https://idp.example.com/&amp;quot;,
  &amp;quot;sub&amp;quot;: &amp;quot;AccessToken&amp;quot;,
  &amp;quot;aud&amp;quot;: [
    &amp;quot;https://api.example.com/&amp;quot;,
    &amp;quot;https://idp.example.com/&amp;quot;
  ],
  &amp;quot;exp&amp;quot;: 1485322113,
  &amp;quot;nbf&amp;quot;: 1485318508,
  &amp;quot;iat&amp;quot;: 1485318513,
  &amp;quot;https://idp.example.com/claim-types/user-id&amp;quot;: &amp;quot;72f5fbcc-75bb-4393-b2dd-76e74ad0fd87&amp;quot;,
  &amp;quot;https://idp.example.com/claim-types/user-name&amp;quot;: &amp;quot;pico jiro&amp;quot;,
  &amp;quot;https://idp.example.com/claim-types/user-email&amp;quot;: &amp;quot;picojiro@example.com&amp;quot;,
  &amp;quot;https://idp.example.com/claim-types/user-age&amp;quot;: 30,
  &amp;quot;https://idp.example.com/claim-types/user-sex&amp;quot;: &amp;quot;male&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;JWTのClaimについて、REST API等のアクセストークンに適用するという観点から仕様をまとめました。
またアクセストークンを構築する例を通して、実際にアクセストークンとしてJWTを適用する方法について説明しました。&lt;/p&gt;

&lt;p&gt;JWTはJWEやJWSと組み合わせて、セキュアなアクセストークンの仕組みを標準的な方法で構築することができるため、非常に有用だと思います。&lt;/p&gt;

&lt;p&gt;今回アクセストークンの例を出力するために書いたgolangのコードを貼っておきますので、参考程度にどうぞ。
なおJWTの確認には、&lt;a href=&#34;https://jwt.io&#34;&gt;jwt.io&lt;/a&gt;が便利です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
	&amp;quot;time&amp;quot;

	&amp;quot;github.com/dgrijalva/jwt-go&amp;quot;
	&amp;quot;github.com/satori/go.uuid&amp;quot;
)

func main() {
	user := &amp;amp;struct {
		Id    string
		Name  string
		Email string
		Age   int
		Sex   string
	}{
		Id:    &amp;quot;72f5fbcc-75bb-4393-b2dd-76e74ad0fd87&amp;quot;,
		Name:  &amp;quot;pico jiro&amp;quot;,
		Email: &amp;quot;picojiro@example.com&amp;quot;,
		Age:   30,
		Sex:   &amp;quot;male&amp;quot;,
	}
	now := time.Now()
	token := jwt.NewWithClaims(jwt.SigningMethodNone, jwt.MapClaims{
		&amp;quot;iss&amp;quot;: &amp;quot;https://idp.example.com/&amp;quot;,
		&amp;quot;sub&amp;quot;: &amp;quot;AccessToken&amp;quot;,
		&amp;quot;aud&amp;quot;: []string{&amp;quot;https://api.example.com/&amp;quot;, &amp;quot;https://idp.example.com/&amp;quot;},
		&amp;quot;exp&amp;quot;: now.Add(1 * time.Hour).Unix(),
		&amp;quot;nbf&amp;quot;: now.Add(-5 * time.Second).Unix(),
		&amp;quot;iat&amp;quot;: now.Unix(),
		&amp;quot;jti&amp;quot;: uuid.NewV4().String(),
		&amp;quot;https://idp.example.com/claim-types/user-id&amp;quot;:    user.Id,
		&amp;quot;https://idp.example.com/claim-types/user-name&amp;quot;:  user.Name,
		&amp;quot;https://idp.example.com/claim-types/user-email&amp;quot;: user.Email,
		&amp;quot;https://idp.example.com/claim-types/user-age&amp;quot;:   user.Age,
		&amp;quot;https://idp.example.com/claim-types/user-sex&amp;quot;:   user.Sex,
	})
	s, _ := token.SigningString()
	println(s)
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Vimをサーバとして稼動させる</title>
      <link>https://kamichidu.github.io/post/2016/12/25-vim-as-a-server/</link>
      <pubDate>Sun, 25 Dec 2016 20:03:08 +0900</pubDate>
      
      <guid>https://kamichidu.github.io/post/2016/12/25-vim-as-a-server/</guid>
      <description>&lt;p&gt;さて、みなさん大好きテキストエディタのVimですが、実はサーバとして稼動させることができることをご存じでしょうか。&lt;br /&gt;
&lt;a href=&#34;http://mattn.kaoriya.net/software/vim/20120127204609.htm&#34;&gt;参考&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Vimにも比較的最近、ソケット通信を扱うためのChannel機能というものが入りました。
そこで、2016年最後のネタとして、VimのChannel機能を使い、Vim Scriptでecho serverを実装してみようと思います。&lt;/p&gt;

&lt;p&gt;まず、Vim本体に以下のパッチを当ててください。
このパッチは、私が開発に利用しているArch Linuxでしか動作確認を取っておらず、面倒だったのでWinSock対応はしておりません。
また、既存のChannel機能に無理矢理合わせるために、開いたソケットを閉じるなどの処理を一切省いてしまいました。
片手落ち感は否めませんが、ここで重要なのは『Vim Scriptでecho serverを実装したい』という願望を叶えることと割り切りました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gist.github.com/anonymous/558d625b8be4d8cf7a913381c851fec6&#34;&gt;パッチはこちら&lt;/a&gt;&lt;br /&gt;
※gistaの設定をミスって、anonymousとして上がってしまいました&amp;hellip;.&lt;/p&gt;

&lt;p&gt;パッチを当てたVimをmakeすると、src/vimが出来あがります。
では早速、Vim Scriptを書いていきましょう。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-vim&#34;&gt;let ch= ch_listen(&#39;0.0.0.0:12345&#39;, {
\   &#39;mode&#39;: &#39;raw&#39;,
\   &#39;waittime&#39;: -1,
\})
while 1
    let st= ch_status(ch)
    echomsg st
    if st ==# &#39;fail&#39; || st ==# &#39;closed&#39;
        break
    endif

    let msg= ch_readraw(ch)
    echomsg &#39;Received: &#39; . msg
    if !empty(msg)
        call ch_sendraw(ch, msg)
    endif
endwhile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;さて、このVim Scriptを &lt;code&gt;echo-server.vim&lt;/code&gt; として保存し、 &lt;code&gt;./src/vim -N -u NONE -U NONE --noplugin -S echo-server.vim&lt;/code&gt; を実行しましょう。
おめでとうございます、 &lt;code&gt;netstat -tanlp&lt;/code&gt; すると、12345ポートでVimがListenしている勇姿が見えるでしょうか。&lt;/p&gt;

&lt;p&gt;動作確認に入ります。
&lt;code&gt;telnet 127.0.0.1 12345&lt;/code&gt; を実行し、何か打ってみてください。
Vimがechoを返してくるはずです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://kamichidu.github.io/images/2016-12-25-demo.gif&#34; alt=&#34;動作の様子&#34; /&gt;&lt;/p&gt;

&lt;p&gt;以上、ネタでした。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Three.jsに入門してみました</title>
      <link>https://kamichidu.github.io/post/2016/12/21-threejs-impression/</link>
      <pubDate>Wed, 21 Dec 2016 20:52:31 +0900</pubDate>
      
      <guid>https://kamichidu.github.io/post/2016/12/21-threejs-impression/</guid>
      <description>&lt;p&gt;最近、WebUIにおけるWebGLの活用に興味があり、その流れでThree.jsに入門してみました。
わからないながら、Three.jsとWebRTCをシンプルに組み合わせて、テクスチャとしてデバイスのカメラを表示してみましたので、その際の所感をまとめます。&lt;/p&gt;

&lt;p&gt;現物はこちら↓ &lt;br /&gt;
リポジトリ: &lt;a href=&#34;https://github.com/kamichidu/js-sandbox-threejs&#34;&gt;https://github.com/kamichidu/js-sandbox-threejs&lt;/a&gt; &lt;br /&gt;
デモ: &lt;a href=&#34;https://kamichidu.github.io/js-sandbox-threejs/&#34;&gt;https://kamichidu.github.io/js-sandbox-threejs/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;まず画面上部の選択欄から、カメラデバイスを選択し、隣のGoボタンを押すと画面中央にカメラからの入力が出てきます。
それだけのシンプルプログラムです。&lt;/p&gt;

&lt;p&gt;Three.jsのドキュメントを読んでいる間は、 &lt;code&gt;THREE&lt;/code&gt; を毎回打つのだるいなと思ってました（どうでもいい）。
実際に書き初めてみると、意外と打ちにくくはなかったので、その点良かったと思います。&lt;/p&gt;

&lt;p&gt;また私自身、OpenGLはCやC++、Goなどからやっていたことはありますが、大抵の場合生のAPIをいじっていたので、そちらのほうが戸惑いが大きかったように思います。
『なんだこの楽さは』的な。&lt;/p&gt;

&lt;p&gt;特に最近のバージョンからvideoタグと併用することで、簡単にカメラ入力をテクスチャ化することができるようになっており、大変便利でした。
最初はWebRTCからカメラ入力取って、videoタグで読み込んで、canvasでキャプチャして&amp;hellip;という流れでやろうとしていたので、この点で驚かされました。&lt;/p&gt;

&lt;p&gt;今回は時間がなくて試せなかったのですが、例えばスプライトにカメラ入力を貼り付けて、そのスプライトに対して拡大/縮小や、そのような効果をつけられると楽しそうな気がします。
また、折角実世界の情報が入力されているので、リアルタイムでの測量やカメラ入力にオーバレイしての情報表示など試してみたい気持ちになりました。&lt;/p&gt;

&lt;p&gt;昨今VRが騒がれていますが、私個人としては任意のシステムに対するより発展的なインタフェイスとしてのARに興味を持っています。
そのため、WebRTCと合わせてWebGLなどを活用する道を模索していけたらな、と思っています。&lt;/p&gt;

&lt;p&gt;以上、お付き合いいただきありがとうございました。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Javaで使える軽量級の永続化ライブラリ</title>
      <link>https://kamichidu.github.io/post/2016/12/06-java-light-weight-persistent/</link>
      <pubDate>Tue, 06 Dec 2016 01:17:43 +0900</pubDate>
      
      <guid>https://kamichidu.github.io/post/2016/12/06-java-light-weight-persistent/</guid>
      <description>

&lt;p&gt;Javaで開発を行う際に、個人規模なので軽量なあれこれが欲しくなるのですが、基本的にJavaでライブラリを探すと重量級のものが多くあります。
ORMなどはその最たる例だと思います。
けれどいわばMicro-ORM的なものや、そのような永続化を主眼に置いたライブラリは、どのような規模でも欲しくなるものだと思います。
個人で開発を行うにあたって、改めて軽量級でオブジェクトの永続化を主眼に置いたライブラリを探してみましたので、いくつか紹介したいと思います。&lt;/p&gt;

&lt;p&gt;なお、今回探した際の観点としては、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Stream APIと親和性が高い（Collection APIでも可）&lt;/li&gt;
&lt;li&gt;設定レスで利用できる&lt;/li&gt;
&lt;li&gt;永続化対象のオブジェクトを、ファイルシステム上に保持できる&lt;/li&gt;
&lt;li&gt;Key-Value-Store（規模的にSQLは書きたくない）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;というものです。
特に重要視したのは、Stream APIとの親和性および設定レスでの利用という点です。&lt;/p&gt;

&lt;h2 id=&#34;chronicle-map-http-chronicle-software-products-chronicle-map&#34;&gt;&lt;a href=&#34;http://chronicle.software/products/chronicle-map/&#34;&gt;Chronicle Map&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;特徴として、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;高パフォーマンス&lt;/li&gt;
&lt;li&gt;off-heapな領域に保持（Direct ByteBuffers）またはファイルシステム上に永続化可能&lt;/li&gt;
&lt;li&gt;java.util.MapのAPIで使える&lt;/li&gt;
&lt;li&gt;TCP/UDP越しにレプリケート可能&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;という感じの、かなりリッチなライブラリ。
あまり軽量っていう感じではないけれど、ある程度本格的なものが欲しかったら考慮する価値がありそう。&lt;/p&gt;

&lt;h2 id=&#34;orientdb-http-orientdb-com&#34;&gt;&lt;a href=&#34;http://orientdb.com&#34;&gt;OrientDB&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;OrientDBの特徴は、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Document DB系&lt;/li&gt;
&lt;li&gt;Scalable&lt;/li&gt;
&lt;li&gt;トランザクションサポート&lt;/li&gt;
&lt;li&gt;複数サーバ上でレプリケート可能&lt;/li&gt;
&lt;li&gt;RDBからデータを取り込める&lt;/li&gt;
&lt;li&gt;SQLでのクエリ操作に対応&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;と、これまたリッチなライブラリ。
なんか軽量って言いたくないレベル&amp;hellip;。&lt;/p&gt;

&lt;h2 id=&#34;mapdb-http-www-mapdb-org&#34;&gt;&lt;a href=&#34;http://www.mapdb.org&#34;&gt;MapDB&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;今回紹介する中で一番有力だと思っているのがこのMapDBです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Collection APIに永続化の機能を付与&lt;/li&gt;
&lt;li&gt;off-heapな領域に保持（Direct ByteBuffers）またはファイルシステム上に永続化可能&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;という感じ。
今回求めていた通りの軽量さ加減なので、MapDBについてもうちょい説明します。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://jankotek.gitbooks.io/mapdb/content/quick-start/&#34;&gt;https://jankotek.gitbooks.io/mapdb/content/quick-start/&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dependency&amp;gt;
  &amp;lt;groupId&amp;gt;org.mapdb&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;mapdb&amp;lt;/artifactId&amp;gt;
  &amp;lt;version&amp;gt;VERSION&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;インストールはmavenで一発。
これは最近のライブラリならほとんどそうですね。
Antの時代などを考えると本当に楽になりました。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;//import org.mapdb.*
DB db = DBMaker.memoryDB().make();
ConcurrentMap map = db.hashMap(&amp;quot;map&amp;quot;).createOrOpen();
map.put(&amp;quot;something&amp;quot;, &amp;quot;here&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;このような感じで、メソッドチェーン形式で設定を行い、永続化機能つきのConcurrentMapをインスタンシエートするらしい。
この形式で利用できるなら、既存のソースコードに組み込むだけで簡単に永続化できる気がします。
こちらだとoff-heapに領域を確保するっぽいですね。
off-heapの場合に永続化がされるかは未検証ですが、少なくともon-heapよりは高速化が期待できそうだし、ファイルストアとAPIが共通なのは嬉しい。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;DB db = DBMaker.fileDB(&amp;quot;file.db&amp;quot;).make();
ConcurrentMap map = db.hashMap(&amp;quot;map&amp;quot;).createOrOpen();
map.put(&amp;quot;something&amp;quot;, &amp;quot;here&amp;quot;);
db.close();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こちらはファイルに永続化する例。
インスタンシエートするまではoff-heapと差異はあるけど、これは仕方ないですね。
その後はAPIが共通なので、開発時にはoff-heapで、本番ではファイルで、とか使い分けができそう。&lt;/p&gt;

&lt;p&gt;現段階で予想される難点として、DI層とどう組み合わせるかってことですね。
いくらでもやり方はあるけれど、単にデフォルトコンストラクタをAOPで注入すると設定が入らないので、そこをどうするかは考えないといけない。
まぁ永続化対象のクラスごとに型を作るなど、対策はありますのでそう大きな問題ではないです。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;今回、Javaで使える軽量級のKVS的に使えるライブラリを3つ紹介しました。
Chronicle DBとOrientDBはある程度しっかりと使いたい用途で、MapDBはカジュアルに利用する用途で使い勝手が良さそうかなと思います。&lt;/p&gt;

&lt;p&gt;さて、MapDBを実際に使ってみるか&amp;hellip;。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ルータの設定で固定IPを設定していたらハマった話</title>
      <link>https://kamichidu.github.io/post/2016/12/04-dhcp-client-identifier/</link>
      <pubDate>Sun, 04 Dec 2016 19:20:31 +0900</pubDate>
      
      <guid>https://kamichidu.github.io/post/2016/12/04-dhcp-client-identifier/</guid>
      <description>&lt;p&gt;我が家では、家庭内でのみ利用するためのサービスを稼動させているサーバがあります。
基本的にmDNSによりホスト名とIPを紐づけているんですが、出先からアクセスしたいときのためにsshdも稼動させている関係でIPを固定したいサーバがあります。&lt;/p&gt;

&lt;p&gt;基本的にルータの設定でできるならそちらに倒したかったため、DHCP固定割り当ての機能を利用しようとしました。
NICのMAC Addressを調べて、該当MAC Addressへ割り当てるIPを固定し、ルータ再起動。
sshdサーバ上で落ちてくるIPを見ると、なぜか固定IP設定したものが落ちてきません。&lt;/p&gt;

&lt;p&gt;色々調べているうちに、DHCPサーバではClient Identifierというものをベースとして、IPを管理しているということがわかりました。
無意識に、MAC Addressベースで管理していると思っていたら、Client Identifierとして一般的なのがMAC Addressというだけの話っぽい。
初めて知った&amp;hellip;。&lt;/p&gt;

&lt;p&gt;とまれ、sshdサーバ上で稼動しているdhcpクライアントの設定を確認してみると、丁度まさにClient IdentifierとしてGUIDを使う設定になってました。
Client Identifierがわかればなんでも良かったんですが、まぁMAC Addressを使うように設定して &lt;code&gt;systemctl restart dhcpcd&lt;/code&gt; すると、ちゃんと設定した固定IPが落ちてくるようになりました。&lt;/p&gt;

&lt;p&gt;ああ、ネットワーク系にもうちょい強くなりたい。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ブラウザ上でのJavaScriptエラーを収集する手法について</title>
      <link>https://kamichidu.github.io/post/2016/09/20-collecting-error-log-on-the-browser/</link>
      <pubDate>Tue, 20 Sep 2016 00:00:00 +0900</pubDate>
      
      <guid>https://kamichidu.github.io/post/2016/09/20-collecting-error-log-on-the-browser/</guid>
      <description>

&lt;p&gt;現代的なWebサービスを構築する場合、避けては通れないのが各種ログの収集と活用です。
HTTPサーバの各種ログ (e.g. アクセスログ、エラーログ) を始めとして、サーバサイドのアプリケーションログなどもよく収集されています。
サーバサイドのログについては、fluentdなど、収集するための手法はある程度確立しているように思いますが、フロントエンドでのログ収集については、あまり議論されていないように思います。&lt;/p&gt;

&lt;p&gt;先日、お仕事でWebサービスを作成したのですが、そのときに改めてブラウザ上でのエラーログの収集について本気出して考えてみたので、ここに記事としてまとめてみようと思います。&lt;/p&gt;

&lt;h1 id=&#34;ブラウザ上のエラーログ収集の目的&#34;&gt;ブラウザ上のエラーログ収集の目的&lt;/h1&gt;

&lt;p&gt;まず収集する目的についてですが、大きなところで以下のようになるかと思います。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;継続的な不具合修正のため (サービス改善)&lt;/li&gt;
&lt;li&gt;ユーザからの問い合わせ時に調査するため (サポート改善)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;特に強調したいのは、サポートの改善という側面です。
Webサービスを継続的に運用していく場合、どうしてもサポートに時間を割かざるを得ません。&lt;/p&gt;

&lt;p&gt;サポート対象外のブラウザでサービスを利用された場合でも、『動かない』という問い合わせを受ける可能性は大いにあります。
このようなケースでは、以下のフローで問い合わせ対応を行うでしょう。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;ユーザからの問い合わせを受ける&lt;/li&gt;
&lt;li&gt;サポートから利用ブラウザとバージョンについて、ユーザに質問する&lt;/li&gt;
&lt;li&gt;ユーザからの回答を得、サポート対象外である旨を伝える&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;しかし、ユーザのITリテラシによっては、利用しているブラウザとバージョンをサポートが知るために、あれこれと受け答えしなければならないことも多くあります。
この手間が、そのままサポートのための費用に直結し、さらにはエンジニアを疲弊させることにも繋がります。&lt;/p&gt;

&lt;p&gt;他にも、本ケースにおいては、サポート対象のブラウザを利用しているにも関わらず、不具合が発生している可能性もあります。
この場合、再現性のあるものであれば良いですが、必ずしもそうとも限りません。
もしそのときのエラーログがあれば、かなり調査の助けになるのではないでしょうか。
他、IEの互換モードを利用していたために発生した不具合だとか、考えるとキリがありません。&lt;/p&gt;

&lt;p&gt;結果的に、可能な限り多くのブラウザ環境において、可能な限り確実にログを収集したいという欲求が生まれます。
これが収集の目的となります。&lt;/p&gt;

&lt;h1 id=&#34;手法&#34;&gt;手法&lt;/h1&gt;

&lt;p&gt;ここでは、色々考えた中から、なるべく目的に沿う形で2つの手法について考察します。
どちらの場合でも、サーバサイドではログを受け付けるREST APIのエンドポイントが存在する前提とします。&lt;/p&gt;

&lt;h2 id=&#34;xmlhttprequestを用いる手法&#34;&gt;XMLHttpRequestを用いる手法&lt;/h2&gt;

&lt;p&gt;Ajaxで有名なXMLHttpRequestを利用する方法です。
モダンブラウザにおいては、XMLHttpRequestの仕様は共通化されてきているため、比較的多くのブラウザで簡単に利用することが可能です。
RESTful APIのお作法に準じるような、HTTP POSTによってエンドポイントにログを投げつけることができます。&lt;/p&gt;

&lt;h3 id=&#34;利点&#34;&gt;利点&lt;/h3&gt;

&lt;p&gt;他のREST APIを呼ぶときと同様の実装をすることができ、全体として統一感を持たせられます。&lt;/p&gt;

&lt;h3 id=&#34;欠点&#34;&gt;欠点&lt;/h3&gt;

&lt;p&gt;ブラウザごとの実装差異をどうにかする必要があります。
また、古めのブラウザではまともに動作しません。&lt;/p&gt;

&lt;h2 id=&#34;imgタグを用いる手法&#34;&gt;IMGタグを用いる手法&lt;/h2&gt;

&lt;p&gt;昔から存在するIMGタグのsrc属性を利用する方法です。
私は今回、この方法が一番ベターだと判断しました。
IE5互換モードでも安定して動作したため、ほとんどのブラウザで動くのではないでしょうか。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;new Image().src= loggingEndpoint + &#39;?&#39; + encodeURIComponent(message);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;利点-1&#34;&gt;利点&lt;/h3&gt;

&lt;p&gt;かなり広範なブラウザで安定して動作します。
また、実装もかなり単純です。&lt;/p&gt;

&lt;h3 id=&#34;欠点-1&#34;&gt;欠点&lt;/h3&gt;

&lt;p&gt;ブラウザによって、URLの長さに制約があることが欠点として挙げられます。
またHTTP GETでログを投げることになるため、キャッシュ切りをする必要があるかもしれません。&lt;/p&gt;

&lt;h1 id=&#34;実環境への適用&#34;&gt;実環境への適用&lt;/h1&gt;

&lt;p&gt;実際にログを投げつける方法にどれを選んだとしても、JavaScript上でエラーが発生したことを補足しなければ、永遠にログを収集することはできません。
エラーを捕捉するための基本的な戦略としては、 &lt;code&gt;window.onerror&lt;/code&gt; や &lt;code&gt;window.addEventListener&lt;/code&gt; を用いるようにします。
JavaScriptはどうしてもページ単位でグローバルな領域であれこれする必要があるため、エラーイベントのハンドリングにも気を遣う必要が出てきます。&lt;/p&gt;

&lt;p&gt;比較的最近のブラウザであれば、 &lt;code&gt;window.addEventListener(&#39;error&#39;, function(evt){})&lt;/code&gt; によって特に考慮なくエラーを捕捉することができます。
しかし古めのブラウザになると、 &lt;code&gt;window.addEventListener&lt;/code&gt; は実装されていないため、 &lt;code&gt;window.onerror&lt;/code&gt; を利用する必要がありますが、これが結構曲者です。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;window.onerror&lt;/code&gt; は、ただ1つの関数しか持つことができず、意図せず上書きしてしまうとアプリケーションコードを破壊してしまいます。
そのため、以下のフローにより上書きを行います。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;window.onerror&lt;/code&gt; に関数が登録されているかをチェック&lt;/li&gt;
&lt;li&gt;登録されていれば変数に退避させる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;window.onerror&lt;/code&gt; に関数を登録する&lt;/li&gt;
&lt;li&gt;退避させた関数を、今回登録した関数内で呼ぶ&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;具体的には、以下のような実装となるはずです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var myErrorHandler= function(message, url, ex){ /* ... */ };
if(window.addEventListener)
{
    window.addEventListener(&#39;error&#39;, function(evt){
        myErrorHandler.call(this, evt.message, evt.filename, evt);
    }, false);
}
else
{
    var next= window.onerror || function(){};
    window.onerror= function(){
        myErrorHandler.apply(this, arguments);
        next.apply(this, arguments);
    };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;まとめ&#34;&gt;まとめ&lt;/h1&gt;

&lt;p&gt;JavaScriptのエラーログを収集する目的について述べ、実現するための2通りの手法について比較しました。
改めて考えると、本記事の文脈においてはXMLHttpRequestを使う意義は薄いを言わざるを得ず、IMGタグによる収集しかないかな、と思います。&lt;/p&gt;

&lt;p&gt;実際、ブラウザのエラーログを収集して損はないと思うので、今後Webサービスを作るのであれば必ず実装したほうが良いと思います。
ログを収集しておけば、サポート対応時にアクセス時刻さえ聞けば問題の切り分けが大分捗ると思うので、開発時に多少手間でも実装したほうが後が楽です。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>高速なVim Plug-inについての一考察</title>
      <link>https://kamichidu.github.io/post/2015/12/06-vim-speed-consideration/</link>
      <pubDate>Sun, 06 Dec 2015 00:00:00 +0900</pubDate>
      
      <guid>https://kamichidu.github.io/post/2015/12/06-vim-speed-consideration/</guid>
      <description>

&lt;p&gt;この記事はVim Advent Calendar 2015の6日目の記事です。
前日は&lt;a href=&#34;http://qiita.com/daisuzu&#34;&gt;daisuzu&lt;/a&gt;さんによる&lt;a href=&#34;http://daisuzu.hatenablog.com/entry/2015/12/05/002129&#34;&gt;VimのCTRL-X補完について&lt;/a&gt;でした。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;さて、この記事ではVimにおけるVim Plug-inについての速度というものをテーマに、あれこれ考察を述べたいと思います。
一般的なソフトウェアの速度についての話から、Vim Plug-inにおける速度は何か、を掘り下げて考えてみることを目的にします。
また話を単純にするため、UnixにおけるCUI Vimの話のみします。&lt;/p&gt;

&lt;p&gt;※記載や認識が間違っている箇所がありましたら教えていただけると喜びます。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;一般的なソフトウェアにおける速度について&#34;&gt;一般的なソフトウェアにおける速度について&lt;/h2&gt;

&lt;p&gt;一般的にソフトウェアにおける速度とは、スループットとレイテンシ、応答時間とで語られることが多いと思います。&lt;/p&gt;

&lt;p&gt;スループットは、単位時間あたりにソフトウェアが処理可能なデータ量を指します。
具体的な意味については&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%82%B9%E3%83%AB%E3%83%BC%E3%83%97%E3%83%83%E3%83%88&#34;&gt;Wikipedia:スループット&lt;/a&gt;を参照していただくことにします。&lt;/p&gt;

&lt;p&gt;レイテンシは、ユーザの入力時点からソフトウェアが応答を返し、実際にユーザへと表示されるまでの時間を指します。
こちらも具体的な意味については&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E3%83%AC%E3%82%A4%E3%83%86%E3%83%B3%E3%82%B7&#34;&gt;Wikipedia:レイテンシ&lt;/a&gt;を参照してください。&lt;/p&gt;

&lt;p&gt;応答時間は、ユーザの入力時点からソフトウェアが応答を返し始めるまでの時間を指します。
こちらも具体的な意味については&lt;a href=&#34;https://ja.wikipedia.org/wiki/%E5%BF%9C%E7%AD%94%E6%99%82%E9%96%93&#34;&gt;Wikipedia:応答時間&lt;/a&gt;を参照してください。&lt;/p&gt;

&lt;h2 id=&#34;vim-plug-inにおける速度とは&#34;&gt;Vim Plug-inにおける速度とは&lt;/h2&gt;

&lt;p&gt;ここでVim Plug-inにおける速度について考えていきます。
Vimはテキストエディタであり、使用する目的はテキストを編集することだと信じています。
また、Vimの目的から言えば、Vim Plug-inの目的とはテキストの編集を補助することだと言えるかもしれません。
きっと。多分。 I HOPE SO.&lt;/p&gt;

&lt;p&gt;テキストを編集するという行為においての速度を気にする場面として、大きく以下のパターンに分けられるのではないでしょうか。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Vimを起動するとき&lt;/li&gt;
&lt;li&gt;編集作業を行っているとき&lt;/li&gt;
&lt;li&gt;マクロ等でテキストを一括処理しているとき&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;以下、各パターンそれぞれについて、速度とは何かを考えてみます。&lt;/p&gt;

&lt;h3 id=&#34;vimを起動するとき&#34;&gt;Vimを起動するとき&lt;/h3&gt;

&lt;p&gt;我々は今端末にいます。
「さあ、編集を始めよう&amp;hellip;！」と思い立ち、または必要にかられ、我々は端末に &lt;code&gt;vim path/to/file&lt;/code&gt; と打ち込み、華麗にReturnをえぐります。&lt;/p&gt;

&lt;p&gt;&amp;hellip;&lt;/p&gt;

&lt;p&gt;&amp;hellip;&lt;/p&gt;

&lt;p&gt;&amp;hellip;&lt;/p&gt;

&lt;p&gt;さくっと起動しなかったら、嫌ですよね？
Vimの起動時における速度とは、単純にReturnをえぐり込んでからVimの画面が表示され、編集を開始できる状態になるまでの時間と考えることができそうです。
つまり、一般的な議論における応答速度にあたると言えそうです。&lt;/p&gt;

&lt;h3 id=&#34;編集作業を行っているとき&#34;&gt;編集作業を行っているとき&lt;/h3&gt;

&lt;p&gt;我々は今Vimでの編集を行っています。
ふと天啓が降りてきて、唐突に &lt;code&gt;public static final String RENBAN_KAISHI= 0;&lt;/code&gt; とテキストを打ち込もうとします。&lt;/p&gt;

&lt;p&gt;p &amp;hellip; u &amp;hellip; b &amp;hellip; l &amp;hellip; c &amp;hellip;&lt;/p&gt;

&lt;p&gt;1文字打ち込むごとに、ラグがあったら嫌ですよね？
編集作業を行っている際の速度とは、1文字打ち込んでから次の文字を打ち込めるようになるまでの時間と考えることができそうです。
また、文字が打ち込めても画面に反映されていない状態だとどうにもならないので、文字を打ち込み、画面に反映され、次の文字が打ち込めるようになるまで、と考えて問題ないかと思います。
つまり、一般的な議論におけるレイテンシにあたると言えそうです。&lt;/p&gt;

&lt;h3 id=&#34;マクロ等でテキストを一括処理しているとき&#34;&gt;マクロ等でテキストを一括処理しているとき&lt;/h3&gt;

&lt;p&gt;我々は今、巨大なファイルに対して定型処理を行う必要に迫られています。
一度きりしか使わないけどスクリプトを書いて処理するか、それとも血の滲むような努力を前提として手動で行うか&amp;hellip;&lt;/p&gt;

&lt;p&gt;「そうだ、マクロ使えばいいじゃん」&lt;/p&gt;

&lt;p&gt;「そうだ、Vim scriptでやっちゃおう」&lt;/p&gt;

&lt;p&gt;天啓を得た我々は、早速取りかかります。
マクロができたので、早速実行をします。&lt;/p&gt;

&lt;p&gt;&amp;hellip;&amp;hellip;&amp;hellip;. (10分後) &amp;hellip; 「いつ終わるのか」&lt;/p&gt;

&lt;p&gt;Vim scriptができたので、早速実行をします。&lt;/p&gt;

&lt;p&gt;&amp;hellip;&amp;hellip;&amp;hellip;. (10分後) &amp;hellip; 「いつ終わるのか」&lt;/p&gt;

&lt;p&gt;時間がかかるなら待ちますが、あまり長い時間は待ちたくないですよね？
古の夜間コンパイルなど2015年の今になっては、ぞっとしない話です。
テキストを一括処理する際の速度とは、単純に処理開始から処理終了までの時間と考えることができそうです。
もちろん、ユーザの体感速度を向上させるために非同期で処理するや進捗を表示するといった工夫はできますが、こと速度の議論においては意味を持ちません。
つまり、一般的な議論におけるスループットにあたると言えそうです。&lt;/p&gt;

&lt;h2 id=&#34;高速なvim-plug-inとは&#34;&gt;高速なVim Plug-inとは&lt;/h2&gt;

&lt;p&gt;ここまででVim Plug-inにおける速度とは何か、ということを考えてきました。
結果的に、速度と一口に言っても、その文脈に応じて意味あいや目的とすることが変わってくることがわかってきました。
つまり単に「高速な」Vim Plug-inと言ったときに、その意味するところは大きく違ってきそうです。
高速なVim Plug-inについて考えるときは、そのVim Plug-inがどういった目的のものなのかをよく考える必要がありそうです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/thinca/vim-quickrun&#34;&gt;thinca/vim-quickrun&lt;/a&gt;を例に速度を考察してみます。
vim-quickrunの目的と、目的に応じた速度とは、&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;編集中のバッファをカジュアルに実行し、結果を別バッファに表示する&lt;/p&gt;

&lt;p&gt;実行を開始してから、別バッファが開くまたは結果がなるべく早く表示されることが重要かと思います。
これは応答速度の概念が適当かと思います。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;編集を中断させない&lt;/p&gt;

&lt;p&gt;バックグラウンドで動いているプロセスから出力を受け取ってバッファへと書き出す必要性から、定期的にポーリングを行っています。
ポーリング処理を行っている際はどうしてもVimをブロックせざるを得ないため、レイテンシの概念が適当かと思います。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;となります。
(間違ってたらゴメンナサイ。)
つまり「vim-quickrunを高速にしたい！」と考えた場合、応答速度を求めるのかレイテンシを求めるのかを切り分けた上でアプローチをする必要があります。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;ここまでで、Vim Plug-inにおける速度とは何か、というテーマで真面目に考えてみました。
Vim Plug-inにおける速度とは、Vim Plug-inの目的によって様々な視点で考えられること、Vim Plug-inの目的に応じた適当なアプローチをすることが重要であることがわかりました。
スループット、レイテンシ、応答時間のいずれが重要なのかを適当に見極め、適当なアプローチを実施することによって世界は高速なVim Plug-inで溢れることを期待してやみません。&lt;/p&gt;

&lt;h2 id=&#34;付録&#34;&gt;付録&lt;/h2&gt;

&lt;p&gt;ここまでで速度について抽象的な話をしてきましたが、じゃあ実際にどうするのっていう方法論について書いてみます。
あくまでも参考程度に考えていただき、今まで話をしてきたように目的に応じて都度都度適当なアプローチや方法論を探る必要があることは意識してください。&lt;/p&gt;

&lt;h3 id=&#34;応答時間を向上させるには&#34;&gt;応答時間を向上させるには&lt;/h3&gt;

&lt;p&gt;応答時間を向上させるためには、大きく以下のアプローチがあるかと思います。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;そもそも処理をしない&lt;/p&gt;

&lt;p&gt;アルゴリズムの見直しにより処理をなくす、ないし減らすことで応答時間は向上します。
また、キャッシングの導入によっても向上はしますが、キャッシングのメリット/デメリットやその効果を見極めて慎重に導入する必要があります。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;処理を遅延させ、必要になった段階で実行する&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Shougo/neobundle.vim&#34;&gt;Shougo/neobundle.vim&lt;/a&gt;ではLazy Loadingとして実装されているものです。
みなさま馴染みがあるのではないでしょうか。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;処理を非同期で行い、必要になった段階で該当処理が終了しているか判定し、終了していなければ待つ&lt;/p&gt;

&lt;p&gt;実装が面倒ですが、場合によっては効果があります。
例えばVim起動時に非同期で外部プロセスを走らせておき、特定のFileTypeに変更されたときに外部プロセスの終了を待つなどができます。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;スループットを向上させるには&#34;&gt;スループットを向上させるには&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;そもそも処理をしない&lt;/li&gt;
&lt;li&gt;キャッシングの導入&lt;/li&gt;
&lt;li&gt;処理を非同期で行い、複数の処理を並列で処理する&lt;/li&gt;
&lt;li&gt;実行速度の速い言語で実装する&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;レイテンシを向上させるには&#34;&gt;レイテンシを向上させるには&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;がんばる (力尽きた)(復活したら何か書くかもしれない)&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>