<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on なるはやで いい感じの 動作確認</title>
    <link>http://kamichidu.github.com/tags/go/</link>
    <description>Recent content in Go on なるはやで いい感じの 動作確認</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Fri, 24 Apr 2015 00:00:00 +0900</lastBuildDate>
    <atom:link href="http://kamichidu.github.com/tags/go/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>goの開発環境を整える</title>
      <link>http://kamichidu.github.com/post/2015/04/24-gogogo/</link>
      <pubDate>Fri, 24 Apr 2015 00:00:00 +0900</pubDate>
      
      <guid>http://kamichidu.github.com/post/2015/04/24-gogogo/</guid>
      <description>

&lt;p&gt;最近ちょいちょいGoで遊んでいます。
その際に、環境構築周りでなんとなく作ったルールがあるので紹介します。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;処理系は~/local/にインストールする&lt;/p&gt;

&lt;p&gt;インストール用のスクリプト&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;でビルドしてインストールを行います。
実行すると自動的にGo-1.4.2をユーザランドにインストールします。
なお、GOROOTは基本的にGoのバイナリに組み込まれていますが、常に指定するようにしています。&lt;/p&gt;

&lt;p&gt;yaourt -Sy go とかで入れるのは楽なんですが、ここは好みですね。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;依存関係のライブラリは、各プロジェクトディレクトリ以下にインストールする&lt;/p&gt;

&lt;p&gt;個人的にはこれすごい大事で、各プロジェクトごとの依存関係を管理するのに役立ちます。
~/.go/等に複数のプロジェクトの依存関係を入れてしまうと、他のプロジェクトのために入れたpackageの影響でビルドがコケたりコケなかったりします。
各プロジェクトごとにGOPATHを切っておくと、そのへんの確認であったり管理が楽になります&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;export GOPATH=$(pwd)/.go/ してから go get github.com/some/thing とかすると、.go/以下にインストールされます。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Goはとてもクロスコンパイルが簡単なので、可能な限りCIサービスと連携して複数プラットフォーム用のバイナリを吐いておく&lt;/p&gt;

&lt;p&gt;開発というより、使ってもらう際の利点となります。
よくある「linuxはビルド簡単にできるからいいんだけど、windowsでビルドするのたるい&amp;hellip;」という状況を軽減できます。
Goはクロスコンパイルが死ぬほど楽なので、 .travis.yml 等からクロスコンパイルする設定を入れておくと、簡単に他の人に試してもらうことができるので楽です。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;以上のルールにより、以下のご利益があります。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;複数のプロジェクト間で依存関係が切り分けることができる&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Goの複数バージョンを簡単に変更できる&lt;/p&gt;

&lt;p&gt;要するに*env系が中でやってることをそのままやる感じですけど、現状Goに決定版のようなツールはないため、当面このやり方でいくか、または何か作ろうかと思ってます。
ただし、GOROOTはバイナリに埋め込まれるため、単にPATHの切り替えだけでいいのですが、まぁ面倒なので。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;便利&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;みんなGoやればいいと思うよ。
私はGoやって楽しいです。(構文はちょっと好みではないけど。)&lt;/p&gt;

&lt;h2 id=&#34;付録&#34;&gt;付録&lt;/h2&gt;

&lt;h3 id=&#34;goの環境変数&#34;&gt;Goの環境変数&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;GOROOT&lt;/p&gt;

&lt;p&gt;Goの処理系をインストールしたディレクトリを指定する。
Goのバイナリ中に埋め込まれるため、bashから echo $GOROOT して何も表示されなくても、 echo $(go env GOROOT) すると表示されるかと思います。
Goの標準packageは $GOROOT 以下に入っています。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;GOPATH&lt;/p&gt;

&lt;p&gt;標準packageでないpackageがインストールされるディレクトリを指定します。
go get hoge/fuga とすると、 $GOPATH/src/ 以下にpackageがインストールされます。
また、 $GOPATH/bin/ 以下には、 go get で入れたpackageのバイナリが格納されます。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;goのインストールスクリプト&#34;&gt;Goのインストールスクリプト&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pushd $TEMP
# github releasesはリダイレクションされるため、-Lをつける必要がある
curl -o go1.4.2.tar.gz -L https://github.com/golang/go/archive/go1.4.2.tar.gz
tar -xzvf go1.4.2.tar.gz
if [ ! -d ~/local/go/ ]; then
    mkdir -p ~/local/go/
fi
mv go-go1.4.2/ ~/local/go/1.4.2/
popd

if [ ! -f ~/local/go/default/ ]; then
    ln -s ~/local/go/1.4.2/ ~/local/go/default/
fi

export GOROOT=~/local/go/default/
export PATH=$GOROOT/bin/:$PATH

pushd ~/local/go/1.4.2/src/
./make.bash
popd
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;Goならそういう管理いらないよ！という意見は欲しい。そこまで把握できている訳ではないので。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:1&#34;&gt;Goならそういう管理いらないよ！という意見は欲しい。そこまで把握できている訳ではないので。
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>