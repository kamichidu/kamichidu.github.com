<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Docker on なるはやで いい感じの 動作確認</title>
    <link>https://kamichidu.github.io/tags/docker/index.xml</link>
    <description>Recent content in Docker on なるはやで いい感じの 動作確認</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <atom:link href="https://kamichidu.github.io/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>PHPでの開発環境構築メモ</title>
      <link>https://kamichidu.github.io/post/2015/06/17-075721/</link>
      <pubDate>Wed, 17 Jun 2015 00:00:00 +0900</pubDate>
      
      <guid>https://kamichidu.github.io/post/2015/06/17-075721/</guid>
      <description>

&lt;p&gt;つい昨日のことですが、PHPでの開発環境を行ったので、メモがてら。&lt;/p&gt;

&lt;p&gt;手順だけはQiitaを参照。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://qiita.com/kamichidu/items/384eecdf4df73b99fa84&#34;&gt;http://qiita.com/kamichidu/items/384eecdf4df73b99fa84&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;phpのバージョン&#34;&gt;PHPのバージョン&lt;/h2&gt;

&lt;p&gt;特に理由がないなら、現状の最新版を使うといいと思います。
&lt;a href=&#34;https://registry.hub.docker.com/&#34;&gt;Docker Hub&lt;/a&gt;には、&lt;a href=&#34;https://registry.hub.docker.com/_/php/&#34;&gt;PHP公式イメージ&lt;/a&gt;が提供されているのでとても助かりました。&lt;/p&gt;

&lt;p&gt;公式イメージには、以下のバージョンがあるみたい。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;5.4.42-cli, 5.4-cli, 5.4.42, 5.4 (5.4/Dockerfile)&lt;/li&gt;
&lt;li&gt;5.4.42-apache, 5.4-apache (5.4/apache/Dockerfile)&lt;/li&gt;
&lt;li&gt;5.4.42-fpm, 5.4-fpm (5.4/fpm/Dockerfile)&lt;/li&gt;
&lt;li&gt;5.5.26-cli, 5.5-cli, 5.5.26, 5.5 (5.5/Dockerfile)&lt;/li&gt;
&lt;li&gt;5.5.26-apache, 5.5-apache (5.5/apache/Dockerfile)&lt;/li&gt;
&lt;li&gt;5.5.26-fpm, 5.5-fpm (5.5/fpm/Dockerfile)&lt;/li&gt;
&lt;li&gt;5.6.10-cli, 5.6-cli, 5-cli, cli, 5.6.10, 5.6, 5, latest (5.6/Dockerfile)&lt;/li&gt;
&lt;li&gt;5.6.10-apache, 5.6-apache, 5-apache, apache (5.6/apache/Dockerfile)&lt;/li&gt;
&lt;li&gt;5.6.10-fpm, 5.6-fpm, 5-fpm, fpm (5.6/fpm/Dockerfile)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;5.4、5.5、5.6系をそれぞれ選べて、しかも最初からApacheまでついてくるのは楽で良いですね。
今回は、5.6-apacheを使いました。
docker pull php:5.6-apacheでDocker HubからイメージをPullしてくる。&lt;/p&gt;

&lt;h2 id=&#34;依存ライブラリの管理&#34;&gt;依存ライブラリの管理&lt;/h2&gt;

&lt;p&gt;今までPHPは、メンテとか開発途中での引き継ぎとかで、自分で構築はやったことなかった。
今回はSmartyとAWS SDKを使いたかったので、依存管理についてちょっと調べた。
&lt;a href=&#34;https://getcomposer.org/&#34;&gt;Composer&lt;/a&gt;が便利っぽい。
どうでもいいけど、PHPって音楽っぽい名前が多いよね。&lt;/p&gt;

&lt;p&gt;composerはデフォルトでプロジェクトローカルへのインストールになります。
インストールすると、composer.pharという実行可能ファイルがカレントディレクトリに作成されますので、これを使う。
composer.jsonに、依存ライブラリを書いていき、./composer.phar installでプロジェクトローカルにインストールができる。
依存関係インストールすると、composer.lockというありがちなファイルができる。&lt;/p&gt;

&lt;p&gt;諸説あるみたいだけど、Composerを使う上では、&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;composer.phar&lt;/li&gt;
&lt;li&gt;composer.json&lt;/li&gt;
&lt;li&gt;composer.lock&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;をバージョン管理しておいたほうが良さそう。
理由は気が向いたら書く。&lt;/p&gt;

&lt;p&gt;一旦以上。
多分あとで記載内容に修正入れると思う。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>