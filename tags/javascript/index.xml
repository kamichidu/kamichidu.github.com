<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascript on なるはやで いい感じの 動作確認</title>
    <link>https://kamichidu.github.io/tags/javascript/index.xml</link>
    <description>Recent content in Javascript on なるはやで いい感じの 動作確認</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <atom:link href="https://kamichidu.github.io/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>ブラウザ上でのJavaScriptエラーを収集する手法について</title>
      <link>https://kamichidu.github.io/post/2016/09/20-collecting-error-log-on-the-browser/</link>
      <pubDate>Tue, 20 Sep 2016 00:00:00 +0900</pubDate>
      
      <guid>https://kamichidu.github.io/post/2016/09/20-collecting-error-log-on-the-browser/</guid>
      <description>

&lt;p&gt;現代的なWebサービスを構築する場合、避けては通れないのが各種ログの収集と活用です。
HTTPサーバの各種ログ (e.g. アクセスログ、エラーログ) を始めとして、サーバサイドのアプリケーションログなどもよく収集されています。
サーバサイドのログについては、fluentdなど、収集するための手法はある程度確立しているように思いますが、フロントエンドでのログ収集については、あまり議論されていないように思います。&lt;/p&gt;

&lt;p&gt;先日、お仕事でWebサービスを作成したのですが、そのときに改めてブラウザ上でのエラーログの収集について本気出して考えてみたので、ここに記事としてまとめてみようと思います。&lt;/p&gt;

&lt;h1 id=&#34;ブラウザ上のエラーログ収集の目的&#34;&gt;ブラウザ上のエラーログ収集の目的&lt;/h1&gt;

&lt;p&gt;まず収集する目的についてですが、大きなところで以下のようになるかと思います。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;継続的な不具合修正のため (サービス改善)&lt;/li&gt;
&lt;li&gt;ユーザからの問い合わせ時に調査するため (サポート改善)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;特に強調したいのは、サポートの改善という側面です。
Webサービスを継続的に運用していく場合、どうしてもサポートに時間を割かざるを得ません。&lt;/p&gt;

&lt;p&gt;サポート対象外のブラウザでサービスを利用された場合でも、『動かない』という問い合わせを受ける可能性は大いにあります。
このようなケースでは、以下のフローで問い合わせ対応を行うでしょう。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;ユーザからの問い合わせを受ける&lt;/li&gt;
&lt;li&gt;サポートから利用ブラウザとバージョンについて、ユーザに質問する&lt;/li&gt;
&lt;li&gt;ユーザからの回答を得、サポート対象外である旨を伝える&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;しかし、ユーザのITリテラシによっては、利用しているブラウザとバージョンをサポートが知るために、あれこれと受け答えしなければならないことも多くあります。
この手間が、そのままサポートのための費用に直結し、さらにはエンジニアを疲弊させることにも繋がります。&lt;/p&gt;

&lt;p&gt;他にも、本ケースにおいては、サポート対象のブラウザを利用しているにも関わらず、不具合が発生している可能性もあります。
この場合、再現性のあるものであれば良いですが、必ずしもそうとも限りません。
もしそのときのエラーログがあれば、かなり調査の助けになるのではないでしょうか。
他、IEの互換モードを利用していたために発生した不具合だとか、考えるとキリがありません。&lt;/p&gt;

&lt;p&gt;結果的に、可能な限り多くのブラウザ環境において、可能な限り確実にログを収集したいという欲求が生まれます。
これが収集の目的となります。&lt;/p&gt;

&lt;h1 id=&#34;手法&#34;&gt;手法&lt;/h1&gt;

&lt;p&gt;ここでは、色々考えた中から、なるべく目的に沿う形で2つの手法について考察します。
どちらの場合でも、サーバサイドではログを受け付けるREST APIのエンドポイントが存在する前提とします。&lt;/p&gt;

&lt;h2 id=&#34;xmlhttprequestを用いる手法&#34;&gt;XMLHttpRequestを用いる手法&lt;/h2&gt;

&lt;p&gt;Ajaxで有名なXMLHttpRequestを利用する方法です。
モダンブラウザにおいては、XMLHttpRequestの仕様は共通化されてきているため、比較的多くのブラウザで簡単に利用することが可能です。
RESTful APIのお作法に準じるような、HTTP POSTによってエンドポイントにログを投げつけることができます。&lt;/p&gt;

&lt;h3 id=&#34;利点&#34;&gt;利点&lt;/h3&gt;

&lt;p&gt;他のREST APIを呼ぶときと同様の実装をすることができ、全体として統一感を持たせられます。&lt;/p&gt;

&lt;h3 id=&#34;欠点&#34;&gt;欠点&lt;/h3&gt;

&lt;p&gt;ブラウザごとの実装差異をどうにかする必要があります。
また、古めのブラウザではまともに動作しません。&lt;/p&gt;

&lt;h2 id=&#34;imgタグを用いる手法&#34;&gt;IMGタグを用いる手法&lt;/h2&gt;

&lt;p&gt;昔から存在するIMGタグのsrc属性を利用する方法です。
私は今回、この方法が一番ベターだと判断しました。
IE5互換モードでも安定して動作したため、ほとんどのブラウザで動くのではないでしょうか。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;new Image().src= loggingEndpoint + &#39;?&#39; + encodeURIComponent(message);
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;利点-1&#34;&gt;利点&lt;/h3&gt;

&lt;p&gt;かなり広範なブラウザで安定して動作します。
また、実装もかなり単純です。&lt;/p&gt;

&lt;h3 id=&#34;欠点-1&#34;&gt;欠点&lt;/h3&gt;

&lt;p&gt;ブラウザによって、URLの長さに制約があることが欠点として挙げられます。
またHTTP GETでログを投げることになるため、キャッシュ切りをする必要があるかもしれません。&lt;/p&gt;

&lt;h1 id=&#34;実環境への適用&#34;&gt;実環境への適用&lt;/h1&gt;

&lt;p&gt;実際にログを投げつける方法にどれを選んだとしても、JavaScript上でエラーが発生したことを補足しなければ、永遠にログを収集することはできません。
エラーを捕捉するための基本的な戦略としては、 &lt;code&gt;window.onerror&lt;/code&gt; や &lt;code&gt;window.addEventListener&lt;/code&gt; を用いるようにします。
JavaScriptはどうしてもページ単位でグローバルな領域であれこれする必要があるため、エラーイベントのハンドリングにも気を遣う必要が出てきます。&lt;/p&gt;

&lt;p&gt;比較的最近のブラウザであれば、 &lt;code&gt;window.addEventListener(&#39;error&#39;, function(evt){})&lt;/code&gt; によって特に考慮なくエラーを捕捉することができます。
しかし古めのブラウザになると、 &lt;code&gt;window.addEventListener&lt;/code&gt; は実装されていないため、 &lt;code&gt;window.onerror&lt;/code&gt; を利用する必要がありますが、これが結構曲者です。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;window.onerror&lt;/code&gt; は、ただ1つの関数しか持つことができず、意図せず上書きしてしまうとアプリケーションコードを破壊してしまいます。
そのため、以下のフローにより上書きを行います。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;window.onerror&lt;/code&gt; に関数が登録されているかをチェック&lt;/li&gt;
&lt;li&gt;登録されていれば変数に退避させる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;window.onerror&lt;/code&gt; に関数を登録する&lt;/li&gt;
&lt;li&gt;退避させた関数を、今回登録した関数内で呼ぶ&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;具体的には、以下のような実装となるはずです。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var myErrorHandler= function(message, url, ex){ /* ... */ };
if(window.addEventListener)
{
    window.addEventListener(&#39;error&#39;, function(evt){
        myErrorHandler.call(this, evt.message, evt.filename, evt);
    }, false);
}
else
{
    var next= window.onerror || function(){};
    window.onerror= function(){
        myErrorHandler.apply(this, arguments);
        next.apply(this, arguments);
    };
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;まとめ&#34;&gt;まとめ&lt;/h1&gt;

&lt;p&gt;JavaScriptのエラーログを収集する目的について述べ、実現するための2通りの手法について比較しました。
改めて考えると、本記事の文脈においてはXMLHttpRequestを使う意義は薄いを言わざるを得ず、IMGタグによる収集しかないかな、と思います。&lt;/p&gt;

&lt;p&gt;実際、ブラウザのエラーログを収集して損はないと思うので、今後Webサービスを作るのであれば必ず実装したほうが良いと思います。
ログを収集しておけば、サポート対応時にアクセス時刻さえ聞けば問題の切り分けが大分捗ると思うので、開発時に多少手間でも実装したほうが後が楽です。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>