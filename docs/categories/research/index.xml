<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Research on なるはやで いい感じの 動作確認</title>
    <link>http://kamichidu.github.com/categories/research/</link>
    <description>Recent content in Research on なるはやで いい感じの 動作確認</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Tue, 09 Feb 2016 00:00:00 +0900</lastBuildDate>
    <atom:link href="http://kamichidu.github.com/categories/research/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Gyazo APIについて</title>
      <link>http://kamichidu.github.com/post/2016/02/09-about-gyazo-api/</link>
      <pubDate>Tue, 09 Feb 2016 00:00:00 +0900</pubDate>
      
      <guid>http://kamichidu.github.com/post/2016/02/09-about-gyazo-api/</guid>
      <description>&lt;p&gt;スクリーンショットをWeb上で共有するための&lt;a href=&#34;https://gyazo.com/&#34;&gt;Gyazo&lt;/a&gt;というサービスがあります。
とても便利なサービスですから、プログラマの方は比較的よく使われているのではないでしょうか。&lt;/p&gt;

&lt;p&gt;さて、このGyazoですが、もともと認証なしで簡単に画像をアップロードするためのAPI (upload.cgi) が用意されていました。
また比較的最近のことではありますが、新しくREST APIが用意され、今後はそちらを使おうというお話になっています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://blogjp.gyazo.com/post/119404281733/gyazo-api%E3%81%A4%E3%81%84%E3%81%AB%E5%85%AC%E9%96%8B%E5%85%A8%E3%81%A6%E3%81%AE%E7%94%BB%E5%83%8F%E3%82%92gyazo%E3%81%97%E3%82%88%E3%81%86&#34;&gt;Gyazo API、ついに公開！全ての画像をGyazoしよう！&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ですがこのAPIを使うためには認証が必要になっており、過去のAPIであったような認証なしで画像をアップロードできるようなAPIは見あたりません。
今後はGyazoに画像をアップロードする際には、必ず認証を行う必要があるのでしょうか？&lt;/p&gt;

&lt;p&gt;ちなみにREST APIを使う際にはOAuth認証が必要になっており、Gyazoへのユーザ登録が必要になります。
ユーザ登録を行うためには、Gyazoに何かしらの画像をアップロードしなければならず、これでは堂々巡りになってしまいます。
またお手軽さの面からも、可能であればupload.cgiを用いた画像アップロードをやりたいものですが、ドキュメントが存在するREST APIに対して、upload.cgiはドキュメントがありません。
upload.cgiは今後廃止予定で、REST APIに一本化されるのか？&lt;/p&gt;

&lt;p&gt;今回、Gyazoのサポートに問い合わせを行い、upload.cgiの廃止予定について聞いてみました。
結論から言えば、upload.cgiは今後も廃止予定はなく、利用可能です。
ただしAPIのエンドポイントについては、旧gyazo.comが新しくupload.gyazo.comになるとのことです。
旧エンドポイントは、今後廃止される予定とのことで、新エンドポイントでは今までと同様にupload.cgiが使えるということでした。&lt;/p&gt;

&lt;p&gt;上記のような質問に対してご返答いただきましたGyazoサポートチームに、この場を借りてお礼を述べさせていただきます。
とても便利なサービスを提供していただいて、大変感謝しております。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Vimで、データ量に応じたデータ転送速度を計測してみた</title>
      <link>http://kamichidu.github.com/post/2014/11/02-vim-data-transfer-time/</link>
      <pubDate>Sun, 02 Nov 2014 00:00:00 +0900</pubDate>
      
      <guid>http://kamichidu.github.com/post/2014/11/02-vim-data-transfer-time/</guid>
      <description>&lt;p&gt;私の作成するpluginでは、巨大なデータをあれこれすることが多いので、Vimでどの程度の時間がかかるかを計測してみた。
以下のグラフを見れば、大体の傾向が掴めるかと思います。
細かい数値は環境によっても変わるとは思いますが、ここではざっくりとした傾向と大雑把な処理時間がわかればいいと割り切っています。
ちなみにArch Linuxでの計測です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://kamichidu.github.com/images/2014-11-02-vim-data-transfer-time.png&#34; alt=&#34;graph&#34; title=&#34;readfile、libcall、if_luaのデータ転送速度&#34; /&gt;&lt;/p&gt;

&lt;p&gt;グラフからわかることは、&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;if_lua以外はデータ量に線形比例する時間がかかる&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;readfile()はそれほど時間がかかるものではない&lt;/p&gt;

&lt;p&gt;単純にIO + メモリ確保程度だと思われる。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;libcall()では文字列経由で渡す必要があるので、かなり時間のかかる処理になっている&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;if_luaは参照経由でのデータ受け渡しが可能なため、非常に高速にデータの受け渡しが行える&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;グラフ中で処理時間にぶれがあるのは、恐らくIOの待ち時間でしょう。&lt;/p&gt;

&lt;p&gt;libcall()で巨大なデータを扱う必要がある場合、ファイル経由での受け渡しをする等の対策が必要になるかもしれません。&lt;/p&gt;

&lt;p&gt;if_luaについては、参照で受け渡せるため、データの受け渡しには時間はかかりません。&lt;/p&gt;

&lt;p&gt;libcall()とif_luaのどちらが高速か、は、luajitが使えるかどうかと、処理の内容によるので一概には言えませんが、データの受け渡しという観点から見た場合はif_luaが有利なように思えます。
もちろん、ファイル経由で受け渡す等、高速化のためのチューニングを行えば、libcall()でも十分な速度が稼げると思います。&lt;/p&gt;

&lt;p&gt;今回用いたベンチマークスクリプトは&lt;a href=&#34;https://gist.github.com/kamichidu/941c633f1978835dc9f5&#34;&gt;gistに上げています&lt;/a&gt;ので、興味のある方はご参照ください。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>